	global main
	extern puts
	extern printf
	extern scanf
	extern malloc
	extern calloc
	extern strlen
	extern strcmp
	extern memset
	extern memcpy
	extern sprintf

	section .text
substring:
	push rbp
	mov rbp, rsp
	sub rsp, 48
	mov rax,qword [arg+8]
	mov qword [rbp-28H], rsi
	mov qword [rbp-30H], rax
	mov r8,rdi
	mov qword [rbp-18H], r8
	mov rax, qword [rbp-28H]
	mov rdx, qword [rbp-30H]
	sub rdx, rax
	mov rax, rdx
	add rax, 3
	mov rdi, rax
	call malloc
	mov qword [rbp-20H], rax
	mov rax, qword [rbp-30H]
	mov edx, eax
	mov rax, qword [rbp-28H]
	sub edx, eax
	mov eax, edx
	add eax, 1
	mov edx, eax
	mov rax, qword [rbp-20H]
	mov byte [rax], dl
	mov qword [rbp-10H], 0
	mov rax, qword [rbp-28H]
	mov qword [rbp-8H], rax
	jmp PSL_022

PSL_021:  add qword [rbp-10H], 1
	mov rdx, qword [rbp-10H]
	mov rax, qword [rbp-20H]
	add rdx, rax
	mov rax, qword [rbp-8H]
	lea rcx, [rax+1H]
	mov rax, qword [rbp-18H]
	add rax, rcx
	movzx   eax, byte [rax]
	mov byte [rdx], al
	add qword [rbp-8H], 1
PSL_022:  mov rax, qword [rbp-8H]
	cmp rax, qword [rbp-30H]
	jle PSL_021
	add qword [rbp-10H], 1
	mov rdx, qword [rbp-10H]
	mov rax, qword [rbp-20H]
	add rax, rdx
	mov byte [rax], 0
	mov rax, qword [rbp-20H]
	leave
	ret
	
	
parseInt:
	push rbp
	mov rbp, rsp
	mov r8,rdi
	mov qword [rbp-18H], r8
	mov qword [rbp-10H], 0
	mov qword [rbp-8H], 1
	jmp PSL_025

PSL_023:  mov rdx, qword [rbp-8H]
	mov rax, qword [rbp-18H]
	add rax, rdx
	movzx   eax, byte [rax]
	cmp al, 47
	jbe PSL_024
	mov rdx, qword [rbp-8H]
	mov rax, qword [rbp-18H]
	add rax, rdx
	movzx   eax, byte [rax]
	cmp al, 57
	ja PSL_024
	mov rdx, qword [rbp-10H]
	mov rax, rdx
	shl rax, 2
	add rax, rdx
	add rax, rax
	mov rdx, rax
	mov rcx, qword [rbp-8H]
	mov rax, qword [rbp-18H]
	add rax, rcx
	movzx   eax, byte [rax]
	movzx   eax, al
	sub eax, 48
	cdqe
	add rax, rdx
	mov qword [rbp-10H], rax
	add qword [rbp-8H], 1
	jmp PSL_025

PSL_024:  mov rax, qword [rbp-10H]
	jmp PSL_026

PSL_025:  mov rax, qword [rbp-18H]
	movzx   eax, byte [rax]
	movzx   eax, al
	cmp rax, qword [rbp-8H]
	jge PSL_023
	mov rax, qword [rbp-10H]
PSL_026:  pop rbp
	ret
	
	
ord:
	push rbp
	mov rbp, rsp
	mov qword [rbp-18H], rsi
	mov r8,rdi
	mov qword [rbp-8H], r8
	mov rax, qword [rbp-18H]
	lea rdx, [rax+1H]
	mov rax, qword [rbp-8H]
	add rax, rdx
	movzx   eax, byte [rax]
	movzx   eax, al
	pop rbp
	ret


getString:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	mov esi, buff.1788
	mov edi, GS_32
	mov eax, 0
	call scanf
	mov edi, buff.1788
	call strlen
	mov qword [rbp-10H], rax
	mov rax, qword [rbp-10H]
	add rax, 2
	mov rdi, rax
	call malloc
	mov qword [rbp-18H], rax
	mov rax, qword [rbp-10H]
	mov edx, eax
	mov rax, qword [rbp-18H]
	mov byte [rax], dl
	mov qword [rbp-8H], 1
	jmp GS_20

GS_19:  mov rdx, qword [rbp-8H]
	mov rax, qword [rbp-18H]
	add rdx, rax
	mov rax, qword [rbp-8H]
	sub rax, 1

	movzx   eax, byte [abs buff.1788+rax]
	mov byte [rdx], al
	add qword [rbp-8H], 1
GS_20:  mov rax, qword [rbp-8H]
	cmp rax, qword [rbp-10H]
	jle GS_19
	mov rax, qword [rbp-18H]
	leave
	ret

getInt:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	lea rax, [rbp-8H]
	mov rsi, rax
	mov edi, GS_31
	mov eax, 0
	call scanf
	mov rax, qword [rbp-8H]
	leave
	ret

toString:
	push rbp
	mov rbp, rsp
	sub rsp, 56
	mov qword [rbp-38H], rdi
	mov qword [rbp-8H], 0
	mov qword [rbp-10H], 1
	cmp qword [rbp-38H], 0
	jnz TS_013
	mov qword [rbp-8H], 1
TS_013:  cmp qword [rbp-38H], 0
	jns TS_014
	neg qword [rbp-38H]
	mov qword [rbp-10H], -1
	add qword [rbp-8H], 1
TS_014:  mov rax, qword [rbp-38H]
	mov qword [rbp-18H], rax
	jmp TS_016

TS_015:  add qword [rbp-8H], 1
	mov rcx, qword [rbp-18H]
	mov rdx, qword 6666666666666667H
	mov rax, rcx
	imul rdx
	sar rdx, 2
	mov rax, rcx
	sar rax, 63
	sub rdx, rax
	mov rax, rdx
	mov qword [rbp-18H], rax
TS_016:  cmp qword [rbp-18H], 0
	jg TS_015
	mov rax, qword [rbp-8H]
	add rax, 2
	mov rdi, rax
	call malloc
	mov qword [rbp-28H], rax
	mov rax, qword [rbp-8H]
	lea rdx, [rax+1H]
	mov rax, qword [rbp-28H]
	add rax, rdx
	mov byte [rax], 0
	mov rax, qword [rbp-28H]
	mov qword [rbp-20H], rax
	mov rax, qword [rbp-8H]
	mov edx, eax
	mov rax, qword [rbp-20H]
	mov byte [rax], dl
	add qword [rbp-20H], 1
	cmp qword [rbp-10H], -1
	jnz TS_017
	mov rax, qword [rbp-20H]
	mov byte [rax], 45
TS_017:  mov rdx, qword [rbp-8H]
	mov rax, qword [rbp-28H]
	add rax, rdx
	mov qword [rbp-20H], rax
	cmp qword [rbp-38H], 0
	jnz TS_019
	mov rax, qword [rbp-20H]
	mov byte [rax], 48
	jmp TS_019

TS_018:  mov rcx, qword [rbp-38H]
	mov rdx, qword 6666666666666667H
	mov rax, rcx
	imul rdx
	sar rdx, 2
	mov rax, rcx
	sar rax, 63
	sub rdx, rax
	mov rax, rdx
	shl rax, 2
	add rax, rdx
	add rax, rax
	sub rcx, rax
	mov rdx, rcx
	mov eax, edx
	lea edx, [rax+30H]
	mov rax, qword [rbp-20H]
	mov byte [rax], dl
	sub qword [rbp-20H], 1
	mov rcx, qword [rbp-38H]
	mov rdx, qword 6666666666666667H
	mov rax, rcx
	imul rdx
	sar rdx, 2
	mov rax, rcx
	sar rax, 63
	sub rdx, rax
	mov rax, rdx
	mov qword [rbp-38H], rax
TS_019:  cmp qword [rbp-38H], 0
	jg TS_018
	mov rax, qword [rbp-28H]
	leave
	ret

concat:
	push rbp
	mov rbp, rsp
	sub rsp, 48
	mov qword [rbp-28H], rdi
	mov qword [rbp-30H], rsi
	mov rax, qword [rbp-28H]
	movzx   eax, byte [rax]
	movzx   edx, al
	mov rax, qword [rbp-30H]
	movzx   eax, byte [rax]
	movzx   eax, al
	add eax, edx
	add eax, 2
	cdqe
	mov rdi, rax
	call malloc
	mov qword [rbp-18H], rax
	mov rax, qword [rbp-28H]
	movzx   edx, byte [rax]
	mov rax, qword [rbp-30H]
	movzx   eax, byte [rax]
	add edx, eax
	mov rax, qword [rbp-18H]
	mov byte [rax], dl
	mov qword [rbp-8H], 0
	mov qword [rbp-10H], 0
	mov qword [rbp-8H], 0
	jmp ML_02

ML_01:  add qword [rbp-10H], 1
	mov rdx, qword [rbp-10H]
	mov rax, qword [rbp-18H]
	add rdx, rax
	mov rax, qword [rbp-8H]
	lea rcx, [rax+1H]
	mov rax, qword [rbp-28H]
	add rax, rcx
	movzx   eax, byte [rax]
	mov byte [rdx], al
	add qword [rbp-8H], 1
ML_02:  mov rax, qword [rbp-28H]
	movzx   eax, byte [rax]
	movzx   eax, al
	cmp rax, qword [rbp-8H]
	jg ML_01
	mov qword [rbp-8H], 0
	jmp ML_04

ML_03:  add qword [rbp-10H], 1
	mov rdx, qword [rbp-10H]
	mov rax, qword [rbp-18H]
	add rdx, rax
	mov rax, qword [rbp-8H]
	lea rcx, [rax+1H]
	mov rax, qword [rbp-30H]
	add rax, rcx
	movzx   eax, byte [rax]
	mov byte [rdx], al
	add qword [rbp-8H], 1
ML_04:  mov rax, qword [rbp-30H]
	movzx   eax, byte [rax]
	movzx   eax, al
	cmp rax, qword [rbp-8H]
	jg ML_03
	add qword [rbp-10H], 1
	mov rdx, qword [rbp-10H]
	mov rax, qword [rbp-18H]
	add rax, rdx
	mov byte [rax], 0
	mov rax, qword [rbp-18H]
	leave
	ret




strls:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov qword [rbp-8H], rdi
	mov qword [rbp-10H], rsi
	mov rax, qword [rbp-10H]
	lea rdx, [rax+1H]
	mov rax, qword [rbp-8H]
	add rax, 1
	mov rsi, rdx
	mov rdi, rax
	call strcmp
	shr eax, 31
	movzx   eax, al
	leave
	ret


strle:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov qword [rbp-8H], rdi
	mov qword [rbp-10H], rsi
	mov rax, qword [rbp-10H]
	lea rdx, [rax+1H]
	mov rax, qword [rbp-8H]
	add rax, 1
	mov rsi, rdx
	mov rdi, rax
	call strcmp
	test eax, eax
	setle   al
	movzx   eax, al
	leave
	ret


streq:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov qword [rbp-8H], rdi
	mov qword [rbp-10H], rsi
	mov rax, qword [rbp-10H]
	lea rdx, [rax+1H]
	mov rax, qword [rbp-8H]
	add rax, 1
	mov rsi, rdx
	mov rdi, rax
	call strcmp
	test eax, eax
	sete al
	movzx   eax, al
	leave
	ret


strge:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov qword [rbp-8H], rdi
	mov qword [rbp-10H], rsi
	mov rax, qword [rbp-10H]
	lea rdx, [rax+1H]
	mov rax, qword [rbp-8H]
	add rax, 1
	mov rsi, rdx
	mov rdi, rax
	call strcmp
	not eax
	shr eax, 31
	movzx   eax, al
	leave
	ret


strgt:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov qword [rbp-8H], rdi
	mov qword [rbp-10H], rsi
	mov rax, qword [rbp-10H]
	lea rdx, [rax+1H]
	mov rax, qword [rbp-8H]
	add rax, 1
	mov rsi, rdx
	mov rdi, rax
	call strcmp
	test eax, eax
	setg al
	movzx   eax, al
	leave
	ret


strne:
	push rbp
	mov rbp, rsp
	sub rsp, 16
	mov qword [rbp-8H], rdi
	mov qword [rbp-10H], rsi
	mov rax, qword [rbp-10H]
	lea rdx, [rax+1H]
	mov rax, qword [rbp-8H]
	add rax, 1
	mov rsi, rdx
	mov rdi, rax
	call strcmp
	test eax, eax
	setne   al
	movzx   eax, al
	leave
	ret


